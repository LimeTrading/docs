"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[143],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,k=u["".concat(d,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8198:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={},l="Trading",o={unversionedId:"trading",id:"trading",title:"Trading",description:"Order execution simulation",source:"@site/docs/trading.md",sourceDirName:".",slug:"/trading",permalink:"/csharp/trading",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"csharpDirect",previous:{title:"Connecting to Lime",permalink:"/csharp/connection"}},d={},s=[{value:"Order execution simulation",id:"order-execution-simulation",level:2},{value:"Sending new equity orders",id:"sending-new-equity-orders",level:2},{value:"Sending new option orders",id:"sending-new-option-orders",level:2},{value:"Cancelling orders",id:"cancelling-orders",level:2},{value:"Replacing orders",id:"replacing-orders",level:2},{value:"ReplaceOptions structure",id:"replaceoptions-structure",level:3},{value:"Busted and corrected orders",id:"busted-and-corrected-orders",level:2}],c={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"trading"},"Trading"),(0,a.kt)("h2",{id:"order-execution-simulation"},"Order execution simulation"),(0,a.kt)("p",null,"Our test environment simulates multiple real life scenarios to facilitate debugging."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Orders with a symbol that start with \u201cAA\u201d will be fully filled. Limit orders execute at the price specified on the order, market orders execute at $50.00"),(0,a.kt)("li",{parentName:"ul"},"Orders with a symbol not starting with the letters \u201cAA\u201d will remain open and would be available to cancel replace later."),(0,a.kt)("li",{parentName:"ul"},"Orders with a symbol starting with \u201cPAR\u201d will be partially filled to half of the requested quantity."),(0,a.kt)("li",{parentName:"ul"},"Orders with a symbol starting with the letters \u201cBUST\u201d will be filled and then the fill will be immediately busted."),(0,a.kt)("li",{parentName:"ul"},"Orders with a symbol starting with \u201cCORRECTP\u201d in them will be filled and then corrected with the price of +$1.00 of the initial fill price."),(0,a.kt)("li",{parentName:"ul"},"Orders with a symbol starting with \u201cCORRECTQ\u201d will be filled and then corrected with the filled quantity to -10 of the initially filled quantity.")),(0,a.kt)("h2",{id:"sending-new-equity-orders"},"Sending new equity orders"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The method to send equity orders")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public async Task IClient.PlaceAsync(\n    long orderId,\n    int quantity,\n    long price,\n    Side side,\n    string symbol,\n    string route,\n    OrderOptions options)\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Relevant callback events")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"void ICallback.OnOrderAck(long eventId, long orderId, long limeOrderId,\n  AckOptions options);\n\nvoid ICallback.OnOrderReject(long eventId, long orderId, string reason);\n\nvoid ICallback.OnFill(long eventId, long orderId, Side side, int liquidity,\n  long fillPrice, int quantityFilled, int quantityLeft,\n  DateTime transactTime, string symbol, FillOptions options)\n")),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"PlaceAsync")," method to create a new equity order."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"long orderId"),(0,a.kt)("td",{parentName:"tr",align:null},"a unique id generated by client. Uniqueness must be maintained within the trading day. An order with duplicate id will be rejected.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int quantity"),(0,a.kt)("td",{parentName:"tr",align:null},"quantity of the order")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"long price"),(0,a.kt)("td",{parentName:"tr",align:null},"order limit price scaled to 1/100 of a cent. For example, value of ",(0,a.kt)("inlineCode",{parentName:"td"},"$40.52")," should be represented as ",(0,a.kt)("inlineCode",{parentName:"td"},"405200"),". The value of ",(0,a.kt)("inlineCode",{parentName:"td"},"0")," indicates a Market order.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Side side"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Buy"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"Sell"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"SellShort")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"BuyToCover"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string symbol"),(0,a.kt)("td",{parentName:"tr",align:null},"security Symbol")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string route"),(0,a.kt)("td",{parentName:"tr",align:null},"route name known to Lime")))),(0,a.kt)("p",null,"As soon as Lime Trading Server receives the order it assigns a lime order id and sends an acknowledge event back to the client. ",(0,a.kt)("inlineCode",{parentName:"p"},"OnOrderAck")," method on your ",(0,a.kt)("inlineCode",{parentName:"p"},"ICallback")," instance receives both orderId and limeOrderId. If the acknowledge has never been called the client can assume that the order has never been received by Lime. Otherwise, in case of any errors the client receives an ",(0,a.kt)("inlineCode",{parentName:"p"},"OnOrderReject"),". After the acknowledgement the order becomes active and can receive one or more ",(0,a.kt)("inlineCode",{parentName:"p"},"OnFill")," events."),(0,a.kt)("h2",{id:"sending-new-option-orders"},"Sending new option orders"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// Generating a unique order id as unix timestamp.\n// Note that this does not necessarily guarantee uniqueness if you send more than one order per millisecond\nvar orderId = (long)(DateTime.Now - new DateTime(1970, 1, 1)).TotalMilliseconds;\n\n// Create an option Call on underlying symbol PAR, expiring tomorrow, strike price $170.00\n// The strike price is scaled to 1/1000 of a dollar.\nvar option  = USOptionsSymbol.Call("PAR", DateTime.Now.AddDays(1), 170000);\n\n// Buy to open 50 contracts at $120.00\nawait client.PlaceUSOptionsAsync(orderId, 50, 1200000, Side.Buy, PositionEffect.Open,\n  option, "ARCP");\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Relevant callback events")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"void ICallback.OnOrderAck(long eventId, long orderId, long limeOrderId,\n  AckOptions options);\n\nvoid ICallback.OnOrderReject(long eventId, long orderId, string reason);\n\nvoid ICallback.OnUSOptionsFill(long eventId, long orderId, Side side,\n  int liquidity, long fillPrice, int quantityFilled, int quantityLeft,\n  DateTime transactTime, USOptionsSymbol symbol, FillOptions options)\n")),(0,a.kt)("p",null,"To create an option order, use ",(0,a.kt)("inlineCode",{parentName:"p"},"PlaceUSOptionsAsync"),". The general behaviour and parameters are essentially the same as for equity order"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"long orderId"),(0,a.kt)("td",{parentName:"tr",align:null},"a unique id generated by client. Uniqueness must be maintained within the trading day. An order with duplicate id will be rejected.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int quantity"),(0,a.kt)("td",{parentName:"tr",align:null},"number of contracts")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"long price"),(0,a.kt)("td",{parentName:"tr",align:null},"order limit price scaled to 1/100 of a cent. For example, value of ",(0,a.kt)("inlineCode",{parentName:"td"},"$40.52")," should be represented as ",(0,a.kt)("inlineCode",{parentName:"td"},"405200"),". The value of ",(0,a.kt)("inlineCode",{parentName:"td"},"0")," indicates a Market order.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Side side"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Buy"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"Sell"),". Note that ",(0,a.kt)("inlineCode",{parentName:"td"},"SellShort")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"BuyToCover")," sides are not applicable to options.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"PositionEffect positionEffect"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Open")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"Close"),". The client is expected to track the positions and send ",(0,a.kt)("inlineCode",{parentName:"td"},"Open")," when buying or selling to open, or ",(0,a.kt)("inlineCode",{parentName:"td"},"Close")," when selling or buying to close an existing position")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"USOptionsSymbol symbol"),(0,a.kt)("td",{parentName:"tr",align:null},"a ",(0,a.kt)("inlineCode",{parentName:"td"},"USOptionsSymbol")," structure describing an options contract.",(0,a.kt)("br",null)," - string underlying - is the root symbol of the option",(0,a.kt)("br",null)," - DateTime expiration - the contract expiration date",(0,a.kt)("br",null)," - int strike - contract strike price. Unlike the limit price where the value is scaled to 1/10000 of a dollar, the strike price is scaled to 1/1000 of a dollar",(0,a.kt)("br",null)," - USOptionType type - Put or Call")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string route"),(0,a.kt)("td",{parentName:"tr",align:null},"route name known to Lime")))),(0,a.kt)("h2",{id:"cancelling-orders"},"Cancelling orders"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"await client.CancelAsync(id);\nawait client.CancelAllAsync(id);\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Related callback events")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"void ICallback.OnCancelAck(long eventId, long orderId);\nvoid ICallback.OnCancelReject(long eventId, long orderId, string reason);\n")),(0,a.kt)("p",null,"There are multiple ways to cancel an order."),(0,a.kt)("p",null,"You need to call ",(0,a.kt)("inlineCode",{parentName:"p"},"CancelAsync")," method passing its id to cancel a specific order. On successul cancellation, callback receives an ",(0,a.kt)("inlineCode",{parentName:"p"},"OnCancelAck")," event. In case of an error the callback receives an ",(0,a.kt)("inlineCode",{parentName:"p"},"OnCancelReject")," including a human-readable message explaining he reason. The most common reason is that requested order is no longer active. It is either cancelled or filled by the time the cancellation is requested. Another common mistake is a wrong order id so that lime trading server can't find the requested order at all."),(0,a.kt)("p",null,"There is also ",(0,a.kt)("inlineCode",{parentName:"p"},"CancelAllAsync")," that allows cancel all active orders at once. The client receives cancellation acknowledgment events on each of the cancelled orders. In case if no orders have been active the client receives nothing."),(0,a.kt)("p",null,"Anoher common practice is to instruct Lime to cancel all orders in case of connectivity issue. To do that, the client has to specify ",(0,a.kt)("inlineCode",{parentName:"p"},"cancelOnDisconnect")," parameter on ",(0,a.kt)("inlineCode",{parentName:"p"},"ConnectAsync"),"."),(0,a.kt)("h2",{id:"replacing-orders"},"Replacing orders"),(0,a.kt)("p",null,"You can cancel an order and replace it with a new order in one call. On most exchanges this is equivalent to actually cancelling the order and sending a new one. It gives the order a new position on the execution queue at exchanges's matching engine. The exception is when order quantity is decreased with same limit price, in this case exchanges amend the order without losing its place on the queue."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public async Task ReplaceAsync(\n  long originalOrderId, long orderId, int newQuantity, long newPrice, ReplaceOptions options);\n")),(0,a.kt)("props",null,"long originalOrderId"),(0,a.kt)("p",null,"Required. An existing open order to be replaced."),(0,a.kt)("props",null,"long orderId"),(0,a.kt)("p",null,"Required. The new order id."),(0,a.kt)("props",null,"int newQuantity"),(0,a.kt)("p",null,"Required. The new quantity of the order."),(0,a.kt)("props",null,"long newPrice"),(0,a.kt)("p",null,"Required. The new limit price of the order. Market orders can not be replaced."),(0,a.kt)("props",null,"ReplaceOptions options"),(0,a.kt)("p",null,"Optional information for a replace request"),(0,a.kt)("h3",{id:"replaceoptions-structure"},"ReplaceOptions structure"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Option"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int ShortSaleAffirmLongQuantity"),(0,a.kt)("td",{parentName:"tr",align:null},"This option is required for certain accounts and affirms that the client has the given long position in the security being traded. This option can only be set for orders which are short-sales. The value must be greater than zero.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int MinQuantity"),(0,a.kt)("td",{parentName:"tr",align:null},"Minimum quantity of an order to be executed, only valid for specific destinations.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int MinimumTriggerVol"),(0,a.kt)("td",{parentName:"tr",align:null},"Minimum Trigger Volume tag, valid for specific destinations and order types.")))),(0,a.kt)("p",null,"On succesful replace, callback receives ",(0,a.kt)("inlineCode",{parentName:"p"},"OnReplaceAck")," with the new order id. The previous order is considered Cancelled. Otherwise, ",(0,a.kt)("inlineCode",{parentName:"p"},"OnReplaceReject")," is called with rejection reason and the previous order stays unaffected. One of the most common reasons of rejecting a replace request is when the original order has already been filled or cancelled. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"void ICallback.OnReplaceAck(long eventId, long origOrderId, long orderId,\n  long limeOrderId, AckOptions options);\n\nvoid ICallback.OnReplaceReject(long eventId, long origOrderId, long orderId,\n  string reason);\n")),(0,a.kt)("h2",{id:"busted-and-corrected-orders"},"Busted and corrected orders"),(0,a.kt)("p",null,"There is a rare case when an exchange would need to handle an error and correct a previously executed fill. They can either bust the fill and after that send a new execution event, or they can send a correction event amending executed price or quantity. The trade to bust or correct is identified by its ",(0,a.kt)("inlineCode",{parentName:"p"},"FillOptions.ExecId"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"void ICallback.OnBust(long eventId, long orderId, Side reversedSide,\n  long bustedPrice, int quantityBusted, int quantityLeft,\n  DateTime transactTime, string symbol, FillOptions options);\n\nvoid ICallback.OnUSOptionsBust(long eventId, long orderId, Side reversedSide,\n  long bustedPrice, int quantityBusted, int quantityLeft,\n  DateTime transactTime, USOptionsSymbol symbol, FillOptions options);\n\nvoid ICallback.OnCorrect(long eventId, long orderId, Side side,\n  long newFillPrice, int newFilledQuantity, int quantityLeft,\n  DateTime transactTime, string symbol, FillOptions options);\n\nvoid ICallback.OnUSOptionsCorrect(long eventId, long orderId, Side side,\n  long newFillPrice, int newFilledQuantity, int quantityLeft,\n  DateTime transactTime, USOptionsSymbol symbol, FillOptions options);\n")))}p.isMDXComponent=!0}}]);