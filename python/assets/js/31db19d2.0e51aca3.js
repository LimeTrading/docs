"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[11],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(t),f=i,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||o;return t?a.createElement(m,r(r({ref:n},d),{},{components:t})):a.createElement(m,r({ref:n},d))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,r[1]=c;for(var l=2;l<o;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3861:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=t(7462),i=(t(7294),t(3905));const o={},r="Session management",c={unversionedId:"session",id:"session",title:"Session management",description:"Upon initiating the connection, the API logs in to the specified trading account on the Lime trading platform using account, username and password. Trading on the account may commence after the onloginaccepted callback is received. If the connection cannot be established or a trading account login failure occurs, the API will return an onconnectionfailed or an onloginfailed callback, respectively. The callbacks are returned asynchronously. Intraday connection status failures are communicated to the client application via the same onconnectionfailed callback. In case of a connection failure, the API instance is deactivated. A new instance of the API must be initiated to continue trading.",source:"@site/docs/session.md",sourceDirName:".",slug:"/session",permalink:"/python/session",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"pythonDirect",previous:{title:"Getting started",permalink:"/python/"},next:{title:"Trading",permalink:"/python/trading"}},s={},l=[],d={toc:l};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"session-management"},"Session management"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def on_login_accepted(self, event_id: int) -> None:\n\ndef on_resend_complete(self, event_begin_id: int, event_end_id: int) -> None: \n\ndef on_login_failed(self, reason: str) -> None:\n\ndef on_connection_failed(self, reason: str) -> None:\n\ndef on_connection_busy(self) -> None:\n\ndef on_connection_available(self) -> None:\n")),(0,i.kt)("p",null,"Upon initiating the connection, the API logs in to the specified trading account on the Lime trading platform using account, username and password. Trading on the account may commence after the ",(0,i.kt)("inlineCode",{parentName:"p"},"on_login_accepted")," callback is received. If the connection cannot be established or a trading account login failure occurs, the API will return an ",(0,i.kt)("inlineCode",{parentName:"p"},"on_connection_failed")," or an ",(0,i.kt)("inlineCode",{parentName:"p"},"on_login_failed")," callback, respectively. The callbacks are returned asynchronously. Intraday connection status failures are communicated to the client application via the same ",(0,i.kt)("inlineCode",{parentName:"p"},"on_connection_failed")," callback. In case of a connection failure, the API instance is deactivated. A new instance of the API must be initiated to continue trading."),(0,i.kt)("p",null,"An API instance is associated with a dedicated messaging session. A single session is maintained for each account during a trading day. Every callback contains an ",(0,i.kt)("inlineCode",{parentName:"p"},"event_id")," that uniquely identifies it throughout the day. Event id values start from ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," and increase monotonically throughout the day. Note that gaps in event sequence are expected since some session-level messages (e.g. heatbeats) that consume event ids are not propagated to the client application. The client application may use ",(0,i.kt)("inlineCode",{parentName:"p"},"event_id")," to continue the trading session where it left off before the interruption by specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"event_id")," argument in the API constructor to be the next value after the highest event id received on the session so far. As an example, a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," will reult in replay of the session from the start. After the replay is complete, an ",(0,i.kt)("inlineCode",{parentName:"p"},"on_resend_complete")," event is sent. An event id value of ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," is a special value that continues the session where it left off without replay."),(0,i.kt)("p",null,"If the order submission rate exceeds the Lime trading platform throughput for too long, buffers will fill up. At that point, the API starts rejecting calls instead of queuing them indefinitely and introducing unbounded delay. If a trading call cannot be delivered to the Lime trading platform, it is rejected synchronously with an appropriate status; optionally, an ",(0,i.kt)("inlineCode",{parentName:"p"},"on_connection_busy")," callback is also placed in the callback thread. It is expected that the client application will reduce the rate of order submission once it detects congestion. The API will periodically poll the connection in congested state. When the condition clears and the connection can accept messages again, an ",(0,i.kt)("inlineCode",{parentName:"p"},"on_connection_available")," callback is placed."))}p.isMDXComponent=!0}}]);