"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[971],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1269:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},o="Getting started",l={unversionedId:"index",id:"index",title:"Getting started",description:"Lime Python SDK is distributed as a wheel package via https//github.com/LimeTrading/docs. Make sure you are connected to Lime network as described below and run the example as python example.py -host  -a  -u  -p",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/python/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"pythonDirect",next:{title:"Session management",permalink:"/python/session"}},s={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting started"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\n# Inherit from default Listener class to handle updates from the server\nclass Listener(lb.Listener):\n  def __init__(self):\n    lb.Listener.__init__(self)\n    self.logged_in = False\n\n  def on_login_accepted(self, event_id):\n    self.logged_in = True\n\n# A helper method to wait on the server response\ndef waitForCallback(condition) -> bool:\n  timeout = time.time() + 5 # 5 second timeouts\n  while True:\n    if (time.time() > timeout):\n      return False\n    if condition():\n      return True\n\n# create an instance of a class that receives all order updates\nlistener = Listener()\n\n# create the api proxy implicitly sending login request\napi = lb.TradingApi(listener, account, user, password, 0, host, True)\n\n# wait for the login response\nif not waitForCallback(lambda : listener.logged_in):\n  printError("Login failed")\n  raise Exception("Login failed")\nelse:\n  printSuccess("Logged in")\n\n# buy 100 shares of AAPL at 145.21, routing to ARCP\napi.place_order(order_id = 1, symbol = "AAPL", quantity = 100, price = 145.21, side = lb.Side.Buy, route = "ARCP")\n\n')),(0,a.kt)("p",null,"Lime Python SDK is distributed as a wheel package via ",(0,a.kt)("a",{parentName:"p",href:"https://pypi.org."},"https://pypi.org.")," Install the package from command line by running ",(0,a.kt)("inlineCode",{parentName:"p"},"pip3 install lime-trading-api --force-reinstall"),". To get started faster, pull a code example from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/LimeTrading/docs"},"https://github.com/LimeTrading/docs"),". Make sure you are connected to Lime network as described below and run the example as ",(0,a.kt)("inlineCode",{parentName:"p"},"python example.py -host <host> -a <account> -u <user> -p <password>")),(0,a.kt)("p",null,"To connect to your trading account you need to have the following prerequisites:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Established network connectivity to Lime data centers. This can be done in miltiple ways. You can either start a VPN using a desktop application from Cisco that we provide you, or for better latency we can establish a cross connect or IPSEC VPN."),(0,a.kt)("li",{parentName:"ul"},"We will tell you the IP address and port of a Lime Trading Server"),(0,a.kt)("li",{parentName:"ul"},"Your account name. In FIX world it would be your SenderCompId."),(0,a.kt)("li",{parentName:"ul"},"Your Lime Direct username and password. These are only used for API connections to Lime Direct")),(0,a.kt)("p",null,"The first thing to do is to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"TradingApi")," instance passing connection parameters. After instantiation, the object attempts to connect and login automatically."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Listener listener"),(0,a.kt)("td",{parentName:"tr",align:null},"an instance of a class implementing ",(0,a.kt)("inlineCode",{parentName:"td"},"Listener")," that will receive order updates")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string account"),(0,a.kt)("td",{parentName:"tr",align:null},"hostname or IP address to connect to")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string user"),(0,a.kt)("td",{parentName:"tr",align:null},"username provided by Lime")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string password"),(0,a.kt)("td",{parentName:"tr",align:null},"password provided by Lime")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int event_id"),(0,a.kt)("td",{parentName:"tr",align:null},"last known event id received from the server.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string host_name"),(0,a.kt)("td",{parentName:"tr",align:null},"hostname or IP address to connect to")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"bool cancel_on_disconnect"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"True")," if you want Lime to immediately cancel all open orders on this account if this session disconnects")))),(0,a.kt)("p",null,"The TradingAPI class uses a Listener in order to provide access to asyncronous events from the server The default Listener interface does not implement any event handlers, to access events you should inherit from Listener and override its methods. Remember to call ",(0,a.kt)("inlineCode",{parentName:"p"},"Listener.__init__")," though!"))}d.isMDXComponent=!0}}]);