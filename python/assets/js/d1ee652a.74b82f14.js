"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[143],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,y=u["".concat(p,".").concat(m)]||u[m]||c[m]||i;return n?r.createElement(y,l(l({ref:t},s),{},{components:n})):r.createElement(y,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8198:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const i={},l="Trading",o={unversionedId:"trading",id:"trading",title:"Trading",description:"A trading call is accepted by the API if and only if it can be transmitted to the Lime trading platform. If the connection with the Lime trading platform is down or congested, calls are synchronously rejected. Any trading method returns an enumeration of CallStatus:",source:"@site/docs/trading.md",sourceDirName:".",slug:"/trading",permalink:"/python/trading",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"pythonDirect",previous:{title:"Session management",permalink:"/python/session"},next:{title:"Trading events",permalink:"/python/callbacks"}},p={},d=[{value:"New equity order",id:"new-equity-order",level:2},{value:"New option order",id:"new-option-order",level:2},{value:"Cancelling orders",id:"cancelling-orders",level:2}],s={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"trading"},"Trading"),(0,a.kt)("p",null,"A trading call is accepted by the API if and only if it can be transmitted to the Lime trading platform. If the connection with the Lime trading platform is down or congested, calls are synchronously rejected. Any trading method returns an enumeration of ",(0,a.kt)("inlineCode",{parentName:"p"},"CallStatus"),":\n",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"=Success, ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),"=ConnectionBusy, ",(0,a.kt)("inlineCode",{parentName:"p"},"2"),"=ConnectionError."),(0,a.kt)("p",null,"Note that initially accepted orders can still be rejected by the Lime trading platform or an exchange during further processing. In such cases, the rejects are submitted via a specified callback, asynchronously, to the client application via the callback thread. If the call returns any value other than ",(0,a.kt)("inlineCode",{parentName:"p"},"Success"),", an order callback is not generated."),(0,a.kt)("h2",{id:"new-equity-order"},"New equity order"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def place_order(self,\n  order_id: int, symbol: str, quantity: int, \n  price: Decimal, side: Side, route: str,\n  properties: OrderProperties = None) -> CallStatus:\n")),(0,a.kt)("p",null,"This method places an equity order to a given route or venue. The primary order characteristics are specified explicitly, more specific details can be set on ",(0,a.kt)("inlineCode",{parentName:"p"},"OrderProperties")," structure"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int order_id"),(0,a.kt)("td",{parentName:"tr",align:null},"The order id generated by client, must be unique throughout the day.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string symbol"),(0,a.kt)("td",{parentName:"tr",align:null},"Security symbol.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int quantity"),(0,a.kt)("td",{parentName:"tr",align:null},"A non-negative quantity of shares.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Decimal price"),(0,a.kt)("td",{parentName:"tr",align:null},"The API assumes a limit order when a positive price value is submitted. If the price is explicitly set to lime_trading_api.MARKET_PRICE, the order is interpreted as a market order.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.Side side"),(0,a.kt)("td",{parentName:"tr",align:null},"Side enumeration, which is ",(0,a.kt)("inlineCode",{parentName:"td"},"0"),"=Buy, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Sell, ",(0,a.kt)("inlineCode",{parentName:"td"},"2"),"=SellShort, ",(0,a.kt)("inlineCode",{parentName:"td"},"3"),"=SellShortExempt, ",(0,a.kt)("inlineCode",{parentName:"td"},"4"),"=BuyToCover. In some cases the server may re-mark the value.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string route"),(0,a.kt)("td",{parentName:"tr",align:null},"The route or venue to send the order to.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.OrderProperties properties"),(0,a.kt)("td",{parentName:"tr",align:null},"Details of the order, can be very specific to the desired route or to current account settings.")))),(0,a.kt)("h2",{id:"new-option-order"},"New option order"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def place_options_order(self,\n  order_id: int, symbol: USOptionSymbol, quantity: int,\n  price: Decimal, side: Side,\n  position_effect: PositionEffect, route: str,\n  properties: USOptionsOrderProperties = None) -> CallStatus:\n")),(0,a.kt)("p",null,"Places an option order to a given route or venue. The primary order characteristics are specified explicitly, more specific details can be set on ",(0,a.kt)("inlineCode",{parentName:"p"},"USOptionsOrderProperties")," structure"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int order_id"),(0,a.kt)("td",{parentName:"tr",align:null},"The order id generated by client, must be unique throughout the day.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.USOptionSymbol symbol"),(0,a.kt)("td",{parentName:"tr",align:null},"The option symbol, a more complex structure discussed below.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int quantity"),(0,a.kt)("td",{parentName:"tr",align:null},"A non-negative quantity of contracts. Note that options are usually quoted with multiplier of 100. For example, buying 1 priced at $1.5 will actually spend $150.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Decimal price"),(0,a.kt)("td",{parentName:"tr",align:null},"The API assumes a limit order unless the price is set to lime_trading_api.MARKET_PRICE. Note that the value of zero is a valid value for Options.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.Side side"),(0,a.kt)("td",{parentName:"tr",align:null},"Side enumeration, which is ",(0,a.kt)("inlineCode",{parentName:"td"},"0"),"=Buy, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Sell. Other values make no sense for Options.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.PositionEffect position_effect"),(0,a.kt)("td",{parentName:"tr",align:null},"Opening or closing position. The values are ",(0,a.kt)("inlineCode",{parentName:"td"},"0"),"=Nil, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Open, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Close.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string route"),(0,a.kt)("td",{parentName:"tr",align:null},"The route or venue to send the order to.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.USOptionsOrderProperties properties"),(0,a.kt)("td",{parentName:"tr",align:null},"Details of the order, can be very specific to the desired route or to current account settings.")))),(0,a.kt)("p",null,"A USOptionSymbol structure has three different constructors, no args will initialize everything to nothing and variables must be set afterwards. 1 arg will assume an OSI string as a parameter and parse it and put it into the correct instance variables. Can also be constructed by sending all parameters as separate arguments."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Example instantiating USOptionSymbol structure using OSI symbol standard\noptions_symbol = USOptionSymbol("MSFT  120821C00022500")\n\n# results in following:\noptions_symbol.base_symbol = MSFT\noptions_symbol.put_or_call = 1\noptions_symbol.expiration_year = 12 (2012) \noptions_symbol.expiration_month = 8\noptions_symbol.expiration_day = 21\noptions_symbol.strike_price = 22500\n')),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"field"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string base_symbol"),(0,a.kt)("td",{parentName:"tr",align:null},"Underlying security symbol")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Enum put_or_call"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"0")," for Puts, ",(0,a.kt)("inlineCode",{parentName:"td"},"1")," for calls")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int expiration_year"),(0,a.kt)("td",{parentName:"tr",align:null},"Expiration year, 2 digits")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int expiration_month"),(0,a.kt)("td",{parentName:"tr",align:null},"Expiraton month")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int expiration_day"),(0,a.kt)("td",{parentName:"tr",align:null},"Expiration day of month")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int strike_price"),(0,a.kt)("td",{parentName:"tr",align:null},"Strike price scaled by 1000, for example $22.5 is expressed as 22500")))),(0,a.kt)("h2",{id:"cancelling-orders"},"Cancelling orders"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def cancel_order(self, order_id: int) -> CallStatus:\n  pass\n\ndef cancel_all_open_orders(self) -> CallStatus:\n  pass\n")),(0,a.kt)("p",null,"A client can cancel a specific order identified by ",(0,a.kt)("inlineCode",{parentName:"p"},"order_id"),". The ID for the cancel request itself is generated by the Lime trading platform.If an order has been partially filled, the cancel request will be submitted for the unfilled portion of the order. A client can also cancel all open orders for the account at once. Both methods apply to all supported order types and asset classes."),(0,a.kt)("p",null,"Another way to cancel all orders is to set ",(0,a.kt)("inlineCode",{parentName:"p"},"cancel_on_disconnect")," flag when creating the API instance instructing Lime to cancel all active orders when connection goes down. It is usually used as safety feature."))}c.isMDXComponent=!0}}]);