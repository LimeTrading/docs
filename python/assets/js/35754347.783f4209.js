"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[757],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,k=m["".concat(d,".").concat(u)]||m[u]||s[u]||i;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8119:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},l="Trading events",o={unversionedId:"callbacks",id:"callbacks",title:"Trading events",description:"onorderaccept",source:"@site/docs/callbacks.md",sourceDirName:".",slug:"/callbacks",permalink:"/python/callbacks",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"pythonDirect",previous:{title:"Trading",permalink:"/python/trading"}},d={},p=[{value:"on_order_accept",id:"on_order_accept",level:2},{value:"on_order_fill",id:"on_order_fill",level:2},{value:"on_options_order_fill",id:"on_options_order_fill",level:2},{value:"on_order_cancel",id:"on_order_cancel",level:2},{value:"on_order_reject",id:"on_order_reject",level:2},{value:"on_order_cancel_reject",id:"on_order_cancel_reject",level:2},{value:"on_order_cancel_replace_reject",id:"on_order_cancel_replace_reject",level:2},{value:"on_order_replace",id:"on_order_replace",level:2},{value:"on_manual_order",id:"on_manual_order",level:2},{value:"on_manual_options_order",id:"on_manual_options_order",level:2},{value:"on_manual_order_replace",id:"on_manual_order_replace",level:2}],c={toc:p};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"trading-events"},"Trading events"),(0,a.kt)("h2",{id:"on_order_accept"},"on_order_accept"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def on_order_accept(self,\n  order_id: int, lime_order_: int,\n  attributes: lime_trading_api.AckAttr,\n  event_id: int) -> None:\n  print(f"AckAttr structure for order {order_id}:")\n  print(str(attributes))\n')),(0,a.kt)("p",null,"Function is called when the order identified by ",(0,a.kt)("inlineCode",{parentName:"p"},"order_id")," was accepted by the venue. ",(0,a.kt)("inlineCode",{parentName:"p"},"lime_order_id")," is generated by Lime trading platform and used to identify the order to the venue. Original client ",(0,a.kt)("inlineCode",{parentName:"p"},"order_id")," is not exposed to the venue. Additional information that may be provided by markets in the order accept message is presented via ",(0,a.kt)("inlineCode",{parentName:"p"},"AckAttr")," structure:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"field"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Decimal adjusted_price"),(0,a.kt)("td",{parentName:"tr",align:null},"The price at which an order or replace was accepted by the market if it is different from the entered price. Some markets (e.g. NASDAQ) may re-price orders on entry. If the accepted price is the same as the entered price of the order or the cancel replace, as is usually the case, ",(0,a.kt)("inlineCode",{parentName:"td"},"adjusted_price")," is set to zero.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Decimal display_price"),(0,a.kt)("td",{parentName:"tr",align:null},"The price at which the order is displayed by the exchange. It is returned if it is different from the ",(0,a.kt)("inlineCode",{parentName:"td"},"adjusted_price")," and if the customer account is configured to receive displayed prices.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"bool display_price_adjusted"),(0,a.kt)("td",{parentName:"tr",align:null},"Some exchanges do not supply the display price itself but inform whether display price is different from the price at which the order was accepted. In such event ",(0,a.kt)("inlineCode",{parentName:"td"},"display_price_adjusted")," flag will be set, if the account is configured for display price notifications. The flag is always set when non-zero ",(0,a.kt)("inlineCode",{parentName:"td"},"adjusted_price")," is provided.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string market_cl_ord_id"),(0,a.kt)("td",{parentName:"tr",align:null},"The value of is set to a ClOrdId used by the Lime trading platform to identify the order to the market if it is different from the ",(0,a.kt)("inlineCode",{parentName:"td"},"lime_order_id"),". This attribute will only be supplied if the customer account is explicitly configured for it.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string market_order_id"),(0,a.kt)("td",{parentName:"tr",align:null},"The order id used by the exchange to identify the order. This attribute will only be supplied if the customer account is explicitly configured for it.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.PositionEffect position_effect"),(0,a.kt)("td",{parentName:"tr",align:null},"The value of the ",(0,a.kt)("inlineCode",{parentName:"td"},"position_effect")," as sent to the market. The values are ",(0,a.kt)("inlineCode",{parentName:"td"},"0"),"=Nil, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Open, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Close. Only applies to Option orders, otherwise set to zero. The trading server may re-mark this value.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.Side side"),(0,a.kt)("td",{parentName:"tr",align:null},"Side enumeration, which is ",(0,a.kt)("inlineCode",{parentName:"td"},"0"),"=Buy, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Sell, ",(0,a.kt)("inlineCode",{parentName:"td"},"2"),"=SellShort, ",(0,a.kt)("inlineCode",{parentName:"td"},"3"),"=SellShortExempt, ",(0,a.kt)("inlineCode",{parentName:"td"},"4"),"=BuyToCover. In some cases the server may re-mark the value")))),(0,a.kt)("h2",{id:"on_order_fill"},"on_order_fill"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def on_order_fill(self,\n  order_id: int,\n  fill_info: lime_trading_api.FillInfo,\n  event_id: int) -> None:\n")),(0,a.kt)("p",null,"The equity order identified by ",(0,a.kt)("inlineCode",{parentName:"p"},"order_id")," was filled or partially filled. Fill information is contained in ",(0,a.kt)("inlineCode",{parentName:"p"},"FillInfo")," structure:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"field"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string symbol"),(0,a.kt)("td",{parentName:"tr",align:null},"Security symbol")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.Side side"),(0,a.kt)("td",{parentName:"tr",align:null},"Side enumeration, which is ",(0,a.kt)("inlineCode",{parentName:"td"},"0"),"=Buy, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Sell, ",(0,a.kt)("inlineCode",{parentName:"td"},"2"),"=SellShort, ",(0,a.kt)("inlineCode",{parentName:"td"},"3"),"=SellShortExempt, ",(0,a.kt)("inlineCode",{parentName:"td"},"4"),"=BuyToCover")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int last_shares"),(0,a.kt)("td",{parentName:"tr",align:null},"Quantity of shares filled on this execution")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Decimal last_price"),(0,a.kt)("td",{parentName:"tr",align:null},"The price of this execution.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int left_qty"),(0,a.kt)("td",{parentName:"tr",align:null},"Quantity left open on the market for the original order. The value is zero if the order is filled completely.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int liquidity"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int transact_time"),(0,a.kt)("td",{parentName:"tr",align:null},"Market timestamp provided with the fill and is the number of milliseconds since Unix epoch")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.ExecType exec_type"),(0,a.kt)("td",{parentName:"tr",align:null},"ExecType enumeration, ",(0,a.kt)("inlineCode",{parentName:"td"},"0"),"=Fill, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Bust, ",(0,a.kt)("inlineCode",{parentName:"td"},"2"),"=Correction")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string exec_id"),(0,a.kt)("td",{parentName:"tr",align:null},"a globally unique identifier of this execution assigned by Lime. For busts and corrections, the returned ",(0,a.kt)("inlineCode",{parentName:"td"},"exec_id")," is that of the original execution that is being busted or corrected")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string contra_broker"),(0,a.kt)("td",{parentName:"tr",align:null},"Provided optionally, if passed back by an exchange.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string last_market"),(0,a.kt)("td",{parentName:"tr",align:null},"Provided optionally, if passed back by an exchange.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string client_data_1"),(0,a.kt)("td",{parentName:"tr",align:null},"The data specified by client when sending the order is echoed back here")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string client_data_2"),(0,a.kt)("td",{parentName:"tr",align:null},"The data specified by client when sending the order is echoed back here")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string client_data_3"),(0,a.kt)("td",{parentName:"tr",align:null},"The data specified by client when sending the order is echoed back here")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string market_liquiduity"),(0,a.kt)("td",{parentName:"tr",align:null},"Provided optionally, if passed back by an exchange.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int transact_time_nanos"),(0,a.kt)("td",{parentName:"tr",align:null},"Unix time stamp with nanoseconds precision")))),(0,a.kt)("h2",{id:"on_options_order_fill"},"on_options_order_fill"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def on_options_order_fill(self,\n  order_id: int,\n  fill_info: lime_trading_api.USOptionsFillInfo,\n  event_id: int) -> None\n")),(0,a.kt)("p",null,"This is the options equivalent for ",(0,a.kt)("inlineCode",{parentName:"p"},"on_order_fill")," specifying the fill information on ",(0,a.kt)("inlineCode",{parentName:"p"},"USOptionsFillInfo")," structure. It is identical to ",(0,a.kt)("a",{parentName:"p",href:"#on_order_fill"},"FillInfo")," structure with only exception of the symbol field, which is not a string but a more complex ",(0,a.kt)("inlineCode",{parentName:"p"},"USOptionSymbol")," structure."),(0,a.kt)("h2",{id:"on_order_cancel"},"on_order_cancel"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def on_order_cancel(self,\n  order_id: int,\n  event_id: int) -> None: \n")),(0,a.kt)("p",null,"The order identified by ",(0,a.kt)("inlineCode",{parentName:"p"},"order_id")," was cancelled by the venue."),(0,a.kt)("h2",{id:"on_order_reject"},"on_order_reject"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def on_order_reject(self,\n  order_id: int, reason: str,\n  event_id: int) -> None: \n")),(0,a.kt)("p",null,"An order identified by ",(0,a.kt)("inlineCode",{parentName:"p"},"order_id")," was rejected by venue or by Lime trading platform. The reason for the reject is in the ",(0,a.kt)("inlineCode",{parentName:"p"},"reason")," field. Note that in some rare cases ",(0,a.kt)("inlineCode",{parentName:"p"},"event_id")," in this callback may be set to zero. This happens if the order is rejected in the API layer itself. Callbacks with zero ",(0,a.kt)("inlineCode",{parentName:"p"},"event_id")," will not be replayed upon reconnection."),(0,a.kt)("h2",{id:"on_order_cancel_reject"},"on_order_cancel_reject"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def on_order_cancel_reject(self,\n  order_id: int, reason: str,\n  event_id: int) -> None:\n")),(0,a.kt)("p",null,"A cancellation of an order identified by ",(0,a.kt)("inlineCode",{parentName:"p"},"order_id")," was rejected by venue or by Lime trading platform. The reason for the reject is in the ",(0,a.kt)("inlineCode",{parentName:"p"},"reason")," field. The most common rejection reason is that the order being cancelled is not open at the moment because it has already been filled or cancelled by this time. Note that in some cases ",(0,a.kt)("inlineCode",{parentName:"p"},"event_id")," in this callback may be set to zero. This happens if the cancel request is rejected in the API itself Callbacks with zero ",(0,a.kt)("inlineCode",{parentName:"p"},"event_id")," will not be replayed upon reconnection."),(0,a.kt)("h2",{id:"on_order_cancel_replace_reject"},"on_order_cancel_replace_reject"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def on_order_cancel_replace_reject(self,\n  order_id: int, replace_order_id: int, reason: str,\n  event_id: int) -> None: \n")),(0,a.kt)("p",null,"A cancel replace request identified by ",(0,a.kt)("inlineCode",{parentName:"p"},"replace_order_id")," for an order identified by ",(0,a.kt)("inlineCode",{parentName:"p"},"order_id")," was rejected by the venue or by Lime trading platform. The reason for the reject is in the ",(0,a.kt)("inlineCode",{parentName:"p"},"reason")," field. Note that in some cases ",(0,a.kt)("inlineCode",{parentName:"p"},"event_id")," in this callback may be set to zero. This happens if the replace request is rejected in the API itself. Callbacks with zero ",(0,a.kt)("inlineCode",{parentName:"p"},"event_id")," will not be replayed upon reconnection."),(0,a.kt)("h2",{id:"on_order_replace"},"on_order_replace"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def on_order_replace(self,\n  order_id: int, replace_order_id: int, lime_replace_order_id: int,\n  attributes: lime_trading_api.AckAttr,\n  event_id: int) -> None:\n")),(0,a.kt)("p",null,"Acknowledges that a previously submitted order identified by ",(0,a.kt)("inlineCode",{parentName:"p"},"order_id")," is now sucessfully replaced by a new order identified by ",(0,a.kt)("inlineCode",{parentName:"p"},"replace_order_id"),". Lime trading platform generated ",(0,a.kt)("inlineCode",{parentName:"p"},"lime_replace_order_id")," for this order and used it to identify the order to the venue. The structure used here is the same as in ",(0,a.kt)("a",{parentName:"p",href:"#on_order_accept"},"on_order_accept")," event"),(0,a.kt)("h2",{id:"on_manual_order"},"on_manual_order"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def on_manual_order(self,\n  order_id: int,\n  manual_order_info: lime_trading_api.ManualOrderInfo,\n  event_id: int) -> None:\n")),(0,a.kt)("p",null,"Sometimes the orders on Lime accounts are placed out of band, for example, using LimePortal. To facilitate the tracking of positions and exposure in the customer application, the API provides optional callbacks echoing the information about such manual orders. "),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"field"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string symbol"),(0,a.kt)("td",{parentName:"tr",align:null},"Security symbol.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string route"),(0,a.kt)("td",{parentName:"tr",align:null},"A route this order was sent to.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int quantity"),(0,a.kt)("td",{parentName:"tr",align:null},"Quantity of shares.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Decimal price"),(0,a.kt)("td",{parentName:"tr",align:null},"Order price in case this is a limit order.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.Side side"),(0,a.kt)("td",{parentName:"tr",align:null},"Side enumeration, which is ",(0,a.kt)("inlineCode",{parentName:"td"},"0"),"=Buy, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Sell, ",(0,a.kt)("inlineCode",{parentName:"td"},"2"),"=SellShort, ",(0,a.kt)("inlineCode",{parentName:"td"},"3"),"=SellShortExempt, ",(0,a.kt)("inlineCode",{parentName:"td"},"4"),"=BuyToCover.")))),(0,a.kt)("h2",{id:"on_manual_options_order"},"on_manual_options_order"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def on_manual_options_order(self,\n  order_id: int,\n  manual_order_info: lime_trading_api.ManualUSOptionsOrderInfo,\n  event_id: int) -> None:\n")),(0,a.kt)("p",null,"The same callback as ",(0,a.kt)("a",{parentName:"p",href:"#on_manual_order"},"on_manual_order")," designed for Options"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"field"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.USOptionSymbol symbol"),(0,a.kt)("td",{parentName:"tr",align:null},"Option symbol, refer to ",(0,a.kt)("a",{parentName:"td",href:"#on_options_order_fill"},"on_options_order_fill")," for details.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string route"),(0,a.kt)("td",{parentName:"tr",align:null},"A route this order was sent to.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int quantity"),(0,a.kt)("td",{parentName:"tr",align:null},"Quantity of shares.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Decimal price"),(0,a.kt)("td",{parentName:"tr",align:null},"Order price in case this is a limit order.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.Side side"),(0,a.kt)("td",{parentName:"tr",align:null},"Side enumeration, which is ",(0,a.kt)("inlineCode",{parentName:"td"},"0"),"=Buy, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Sell, ",(0,a.kt)("inlineCode",{parentName:"td"},"2"),"=SellShort, ",(0,a.kt)("inlineCode",{parentName:"td"},"3"),"=SellShortExempt, ",(0,a.kt)("inlineCode",{parentName:"td"},"4"),"=BuyToCover.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lime_trading_api.PositionEffect position_effect"),(0,a.kt)("td",{parentName:"tr",align:null},"The value of the ",(0,a.kt)("inlineCode",{parentName:"td"},"position_effect")," as sent to the market. The values are ",(0,a.kt)("inlineCode",{parentName:"td"},"0"),"=Nil, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Open, ",(0,a.kt)("inlineCode",{parentName:"td"},"1"),"=Close.")))),(0,a.kt)("h2",{id:"on_manual_order_replace"},"on_manual_order_replace"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def on_manual_order_replace(self,\n  order_id: int, replace_order_id: int,\n  quantity: int, price: Decimal,\n  event_id : int) -> None:\n")),(0,a.kt)("p",null,"Notification about an out-of-band order replace. An order known as ",(0,a.kt)("inlineCode",{parentName:"p"},"order_id")," is being replaced by a new order known as ",(0,a.kt)("inlineCode",{parentName:"p"},"replace_order_id"),",  where ",(0,a.kt)("inlineCode",{parentName:"p"},"quantity")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"price")," are the new values."))}s.isMDXComponent=!0}}]);